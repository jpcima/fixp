/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#pragma once
#include "fixp.h"
#include <iostream>
#include <cmath>

template <unsigned I, unsigned F, bool S>
std::ostream &operator<<(std::ostream &o, fixp::fixp<I, F, S> x) {
  // return x.print_real_form(o);
  return x.print_structured_form(o);
}

namespace fixp {

template <unsigned I, unsigned F, bool S>
constexpr inline auto fixp<I, F, S>::repr() const -> repr_t {
  return repr_;
}

template <unsigned I, unsigned F, bool S>
constexpr inline auto fixp<I, F, S>::ipart() const -> repr_t {
  urepr_t intbits = urepr_t(repr_) >> F;
  constexpr urepr_t smask = (urepr_t(1) << (I - 1));
  constexpr urepr_t vmask = smask - 1;
  return (S && (intbits & smask)) ?
    -repr_t((~intbits & vmask) + 1) : repr_t(intbits);
}

template <unsigned I, unsigned F, bool S>
constexpr inline auto fixp<I, F, S>::fpart() const -> urepr_t {
  return repr_ & ((urepr_t(1) << F) - 1);
}

template <unsigned I, unsigned F, bool S>
constexpr inline void fixp<I, F, S>::repr(repr_t r) {
  repr_ = r;
}

template <unsigned I, unsigned F, bool S>
constexpr inline void fixp<I, F, S>::ipart(repr_t i) {
  urepr_t intbits = (i < 0) ?
    ~(urepr_t(-i) - urepr_t(1)) : urepr_t(i);
  repr_ = fpart() | (intbits << F);
}

template <unsigned I, unsigned F, bool S>
constexpr inline void fixp<I, F, S>::fpart(urepr_t f) {
  repr_ = (ipart() << F) | f;
}

template <unsigned I, unsigned F, bool S>
constexpr fixp<I, F, S>::fixp() {
}

#define FIXP_DEF_INT_CTOR(T)                    \
  template <unsigned I, unsigned F, bool S>     \
  constexpr fixp<I, F, S>::fixp(T x) {          \
    ipart(x);                                   \
  }
FIXP_EACH_UINT_TYPE(FIXP_DEF_INT_CTOR);
FIXP_EACH_INT_TYPE(FIXP_DEF_INT_CTOR);

#define FIXP_DEF_FP_CTOR(T)                     \
  template <unsigned I, unsigned F, bool S>     \
  constexpr fixp<I, F, S>::fixp(T x) {          \
    const T scale = urepr_t(1) << F;            \
    repr_t i = x;                               \
    T f = x - i;                                \
    bool n = S && x < 0 && f;                   \
    ipart(i - n);                               \
    fpart((f + n) * scale);                     \
  }
FIXP_EACH_FP_TYPE(FIXP_DEF_FP_CTOR);

template <unsigned I, unsigned F, bool S>
constexpr fixp<I, F, S> fixp<I, F, S>::operator+(fixp<I, F, S> x) const {
  fixp<I, F, S> r;
  r.repr = repr_ + x.repr_;
  return r;
}

template <unsigned I, unsigned F, bool S>
constexpr fixp<I, F, S> fixp<I, F, S>::operator-(fixp<I, F, S> x) const {
  fixp<I, F, S> r;
  r.repr = repr_ - x.repr_;
  return r;
}

template <unsigned I, unsigned F, bool S>
constexpr fixp<I, F, S> fixp<I, F, S>::operator*(fixp<I, F, S> x) const {
  fixp<I, F, S> r;
  repr_t scale = repr_t(1) << F;
  r.repr_ = repr_t(intermediate_t(repr_) * x.repr_ / scale);
  return r;
}

template <unsigned I, unsigned F, bool S>
constexpr fixp<I, F, S> fixp<I, F, S>::operator/(fixp<I, F, S> x) const {
  fixp<I, F, S> r;
  repr_t scale = repr_t(1) << F;
  r.repr_ = repr_t(intermediate_t(repr_) * scale / x.repr_);
  return r;
}

#define FIXP_DEF_MUTATION_OPERATOR(op, opm)                       \
  template <unsigned I, unsigned F, bool S>                       \
  constexpr fixp<I, F, S> &fixp<I, F, S>::opm(fixp<I, F, S> x) {  \
    *this = op(x);                                                \
    return *this;                                                 \
  }
FIXP_DEF_MUTATION_OPERATOR(operator+, operator+=);
FIXP_DEF_MUTATION_OPERATOR(operator-, operator-=);
FIXP_DEF_MUTATION_OPERATOR(operator*, operator*=);
FIXP_DEF_MUTATION_OPERATOR(operator/, operator/=);

template <unsigned I, unsigned F, bool S>
constexpr fixp<I, F, S> fixp<I, F, S>::operator-() const {
  fixp<I, F, S> r;
  repr_t i = ipart();
  urepr_t f = fpart();
  r.ipart(-i - (f > 0));
  r.fpart(((urepr_t(1) << F) - f) & ((urepr_t(1) << F) - 1));
  return r;
}

template <unsigned I, unsigned F, bool S>
constexpr bool fixp<I, F, S>::operator==(fixp<I, F, S> x) const {
  return repr_ == x.repr_;
}

template <unsigned I, unsigned F, bool S>
constexpr bool fixp<I, F, S>::operator!=(fixp<I, F, S> x) const {
  return repr_ != x.repr_;
}

template <unsigned I, unsigned F, bool S>
constexpr bool fixp<I, F, S>::operator<(fixp<I, F, S> x) const {
  return repr_ < x.repr_;
}

template <unsigned I, unsigned F, bool S>
constexpr bool fixp<I, F, S>::operator<=(fixp<I, F, S> x) const {
  return repr_ <= x.repr_;
}

template <unsigned I, unsigned F, bool S>
constexpr bool fixp<I, F, S>::operator>(fixp<I, F, S> x) const {
  return repr_ > x.repr_;
}

template <unsigned I, unsigned F, bool S>
constexpr bool fixp<I, F, S>::operator>=(fixp<I, F, S> x) const {
  return repr_ >= x.repr_;
}

#define FIXP_DEF_FP_OPERATOR(T)                 \
  template <unsigned I, unsigned F, bool S>     \
  constexpr fixp<I, F, S>::operator T() const { \
    T i = ipart();                              \
    T f = fpart();                              \
    return i + f / (urepr_t(1) << F);           \
  }
FIXP_EACH_FP_TYPE(FIXP_DEF_FP_OPERATOR);

#define FIXP_DEF_INT_OPERATOR(T)                   \
  template <unsigned I, unsigned F, bool S>        \
  constexpr fixp<I, F, S>::operator T() const {    \
    repr_t i = ipart();                            \
    return i + (i < 0 && fpart() > 0);             \
  }
FIXP_EACH_UINT_TYPE(FIXP_DEF_INT_OPERATOR);
FIXP_EACH_INT_TYPE(FIXP_DEF_INT_OPERATOR);

template <unsigned I, unsigned F, bool S>
template <unsigned I2, unsigned F2, bool S2>
fixp<I, F, S>::operator fixp<I2, F2, S2>() {
  fixp<I2, F2, S2> r;
  if (I == I2 && F == F2 && S == S2) {
    r.repr(repr_);
  } else {
    typedef typename fixp<I2, F2, S2>::repr_t repr2_t;
    typedef typename fixp<I2, F2, S2>::urepr_t urepr2_t;
    repr2_t i2 = ipart();
    urepr2_t f2 = (F2 > F) ?
      (urepr2_t(fpart()) << (F2 - F)) :
      urepr2_t(fpart() >> (F - F2));
    r.ipart(i2);
    r.fpart(f2);
  }
  return r;
}

template <unsigned I, unsigned F, bool S>
std::ostream &fixp<I, F, S>::print_real_form(std::ostream &o) {
  return o << double(*this);
}

template <unsigned I, unsigned F, bool S>
std::ostream &fixp<I, F, S>::print_structured_form(std::ostream &o) {
  repr_t i = ipart();
  urepr_t f = fpart();
  return o << "fixp{" << i << '+' << double(f) / (urepr_t(1) << F) << '}';
}

}  // namespace fixp
