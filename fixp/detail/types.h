/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#pragma once
#include <cstdint>

#if !defined(FIXP_SUPPORTS_64BIT_NUMS)
#define FIXP_SUPPORTS_64BIT_NUMS 1
#endif

#if FIXP_SUPPORTS_64BIT_NUMS

#if defined(__GNUC__) && defined(__SIZEOF_INT128__)
#define FIXP_HAS_BUILTIN_INT128 1
#define FIXP_INT128_T ::__int128_t
#define FIXP_UINT128_T ::__uint128_t
#endif

#if !defined(FIXP_HAS_BUILTIN_INT128)
#include <boost/multiprecision/cpp_int.hpp>
#define FIXP_INT128_T boost::multiprecision::int128_t
#define FIXP_UINT128_T boost::multiprecision::uint128_t
#endif

#endif  // FIXP_SUPPORTS_64BIT_NUMS

namespace fixp {
namespace detail {

#define FIXP_EACH_UINT_TYPE(F) F(uint8_t) F(uint16_t) F(uint32_t) F(uint64_t)
#define FIXP_EACH_INT_TYPE(F) F(int8_t) F(int16_t) F(int32_t) F(int64_t)
#define FIXP_EACH_FP_TYPE(F) F(float) F(double) F(long double)

#if FIXP_SUPPORTS_64BIT_NUMS
typedef FIXP_INT128_T int128_t;
typedef FIXP_UINT128_T uint128_t;
#endif  // FIXP_SUPPORTS_64BIT_NUMS

template <unsigned bits> struct intN;
template <> struct intN<8> { typedef int8_t type; };
template <> struct intN<16> { typedef int16_t type; };
template <> struct intN<32> { typedef int32_t type; };
template <> struct intN<64> { typedef int64_t type; };
#if FIXP_SUPPORTS_64BIT_NUMS
template <> struct intN<128> { typedef int128_t type; };
#endif
template <unsigned nbits> using intN_t = typename intN<nbits>::type;

template <unsigned bits> struct uintN;
template <> struct uintN<8> { typedef uint8_t type; };
template <> struct uintN<16> { typedef uint16_t type; };
template <> struct uintN<32> { typedef uint32_t type; };
template <> struct uintN<64> { typedef uint64_t type; };
#if FIXP_SUPPORTS_64BIT_NUMS
template <> struct uintN<128> { typedef uint128_t type; };
#endif
template <unsigned nbits> using uintN_t = typename uintN<nbits>::type;

}  // namespace detail
}  // namespace fixp
