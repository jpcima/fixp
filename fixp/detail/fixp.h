/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#pragma once
#include "types.h"
#include <type_traits>
#include <iosfwd>

namespace fixp {

template <unsigned I, unsigned F, bool S>
struct fixp {
  typedef detail::uintN_t<I + F> urepr_t;
  typedef detail::intN_t<I + F> srepr_t;
  typedef typename std::conditional<S, srepr_t, urepr_t>::type repr_t;

  static constexpr unsigned int_bits = I;
  static constexpr unsigned frac_bits = F;
  static constexpr bool is_signed_type = S;

  constexpr fixp();

#define FIXP_DECL_TYPE_CTOR(T) constexpr fixp(T x);
  FIXP_EACH_UINT_TYPE(FIXP_DECL_TYPE_CTOR);
  FIXP_EACH_INT_TYPE(FIXP_DECL_TYPE_CTOR);
  FIXP_EACH_FP_TYPE(FIXP_DECL_TYPE_CTOR);

  constexpr fixp<I, F, S> operator+(fixp<I, F, S> x) const;
  constexpr fixp<I, F, S> operator-(fixp<I, F, S> x) const;
  constexpr fixp<I, F, S> operator*(fixp<I, F, S> x) const;
  constexpr fixp<I, F, S> operator/(fixp<I, F, S> x) const;

#define FIXP_DECL_MUTATION_OPERATOR(op) constexpr fixp<I, F, S> &op(fixp<I, F, S> x);
  FIXP_DECL_MUTATION_OPERATOR(operator+=);
  FIXP_DECL_MUTATION_OPERATOR(operator-=);
  FIXP_DECL_MUTATION_OPERATOR(operator*=);
  FIXP_DECL_MUTATION_OPERATOR(operator/=);

  constexpr fixp<I, F, S> operator-() const;

  constexpr bool operator==(fixp<I, F, S> x) const;
  constexpr bool operator!=(fixp<I, F, S> x) const;

  constexpr bool operator<(fixp<I, F, S> x) const;
  constexpr bool operator<=(fixp<I, F, S> x) const;
  constexpr bool operator>(fixp<I, F, S> x) const;
  constexpr bool operator>=(fixp<I, F, S> x) const;

#define FIXP_DECL_FP_OPERATOR(T) explicit constexpr operator T() const;
  FIXP_EACH_FP_TYPE(FIXP_DECL_FP_OPERATOR);

#define FIXP_DECL_INT_OPERATOR(T) explicit constexpr operator T() const;
  FIXP_EACH_UINT_TYPE(FIXP_DECL_INT_OPERATOR);
  FIXP_EACH_INT_TYPE(FIXP_DECL_INT_OPERATOR);

  template <unsigned I2, unsigned F2, bool S2>
  explicit operator fixp<I2, F2, S2>();

  std::ostream &print_real_form(std::ostream &o);
  std::ostream &print_structured_form(std::ostream &o);

  constexpr repr_t repr() const;
  constexpr repr_t ipart() const;
  constexpr urepr_t fpart() const;
  constexpr void repr(repr_t r);
  constexpr void ipart(repr_t i);
  constexpr void fpart(urepr_t f);

 private:
  repr_t repr_ = 0;

  static constexpr unsigned intermediate_bits = 2u * (I + F);
  typedef detail::uintN_t<intermediate_bits> uintermediate_t;
  typedef detail::intN_t<intermediate_bits> sintermediate_t;
  typedef typename std::conditional<S, sintermediate_t, uintermediate_t>::type intermediate_t;
};

}  // namespace fixp

template <unsigned I, unsigned F, bool S>
std::ostream &operator<<(std::ostream &o, fixp::fixp<I, F, S> x);

#include "fixp_impl.h"
